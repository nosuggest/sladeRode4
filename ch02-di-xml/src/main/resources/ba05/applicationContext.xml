<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--依赖注入：给属性赋值
        1、xml标签和属性
        2、使用注解

        di的分类：
        1）设值注入，就是Spring的调用类的set方法
        2）构造注入，Spring调用类的构造方法完成属性赋值

        简单类型：string中把string和Java中的基本数据类型都叫做简单类型
        1、设值注入，就是Spring的调用类的set方法，完成属性赋值
            简单类型的设值注入：<property name="属性名" value="简单类型属性值" />
            <bean id ="xx" class = "xxx">
                <property name="属性名" value="简单类型属性值" />
                ...
                ...
            </bean>

    -->

    <!--
    引用类型的设值注入，使用ref来赋值
    ref有两种使用方法：
    1.ref作为属性
            <bean id ="xx" class = "xxx">
                <property name="属性名" ref="bean的id" />
                ...
                ...
            </bean>
    2.ref作为子标签
                <bean id ="xx" class = "xxx">
                <property name="属性名">
                    <ref bean = "bean的id">
                </property>

                ...
                ...
            </bean>

    -->

    <!--
    构造注入：Spring在调用类的有参构造方法，在创建对象的同时，给属性赋值
    使用标签:<constructor-arg>
        <constructor-arg>表示构造方法的一个参数
        属性：
        1、name：构造参数的构造方法的形参名
        2、index：构造方法的参数位置，0开始
        3、value：表示简单类型的参数值
        4、ref：引用类型的参数值
    -->

    <!--
    引用类型的自动注入：
    1、byName：按照名称注入，Java中引用类型的属性名和Spring容器（xml配置文件）<bean>的id值是一样的，且数据类型是一样的，这样的bean可以赋值给引用
        <bean id ="xx" class = "yy" autowire="byName">
            简单类型的赋值
        </bean>

    2、byType：按数据类型注入，Java类中引用类型和Spring容器（xml配置文件）中<bean>的class属性值是同源关系的，这样的bean能够赋值给引用类型
    同源关系：
        1、Java类中引用类型的数据类型和<bean>的class值是一样的
        2、Java类中引用类型的数据类型和<bean>的class值是父子类的
        3、Java类中引用类型的数据类型和<bean>的class值是接口实现关系的

        <bean id ="xx" class = "yy" autowire="byType">
            简单类型的赋值
        </bean>
    -->
    <bean id="myStudent" class="com.ymm.ba05.Student" autowire="byType">
        <property name="name" value="李四"/>
        <property name="age" value="20"/>
        <!--引用类型-->
        <!--<property name="school" ref="mySchool"/>-->
    </bean>

    <!--&lt;!&ndash;这边取得是com.ymm.ba05.Student中的School类型和以下的com.ymm.ba05.School中的School类型一致&ndash;&gt;-->
    <!--<bean id="school" class="com.ymm.ba05.School">-->
        <!--<property name="name" value="江南大学"/>-->
        <!--<property name="adress" value="中国无锡"/>-->
    <!--</bean>-->

    <!--这边取得是com.ymm.ba05.Student中的School类型和以下的com.ymm.ba05.primarySchool中父类的School类型一致-->
    <bean id="primarySchool" class="com.ymm.ba05.primarySchool">
        <property name="name" value="middles chool"/>
        <property name="adress" value="Jiangsu"/>
    </bean>

    <!--如果同时有以上两个类，会报错NoUniqueBeanDefinitionException，歧义-->

</beans>